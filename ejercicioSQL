REQUERIMIENTOS DEL PROYECTO
The project needs to contain the following technical features:
Build a database with the following tables: Students, Courses, Professors, Grades
Foreign key relationships between the tables
Create a script that populates all of the database tables with sample data
SQL query scripts for:
The average grade that is given by each professor
The top grades for each student
Sort students by the courses that they are enrolled in
Create a summary report of courses and their average grades, sorted by the most challenging course (course with the lowest average grade) to the easiest course
Finding which student and professor have the most courses in common


-- ******************************************************************************************
-- CREACION DE LAS TABLAS


CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);


CREATE TABLE Courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(100),
    credits INT
);


CREATE TABLE Professors (
    professor_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50)
);


CREATE TABLE Grades (
    grade_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    professor_id INT,
    grade DECIMAL(5, 2),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    FOREIGN KEY (professor_id) REFERENCES Professors(professor_id)
);

-- ***********************************************************************************************************************************
-- POBLAR LAS TABLAS


INSERT INTO Students (student_id, first_name, last_name) VALUES 
(1, 'Juan', 'Pérez'),
(2, 'María', 'López'),
(3, 'Carlos', 'García');


INSERT INTO Courses (course_id, course_name, credits) VALUES 
(1, 'Matemáticas', 3),
(2, 'Literatura', 2),
(3, 'Ciencias', 4);


INSERT INTO Professors (professor_id, first_name, last_name, department) VALUES 
(1, 'Ana', 'Martínez', 'Matemáticas'),
(2, 'Luis', 'Fernández', 'Literatura'),
(3, 'Elena', 'Gómez', 'Ciencias');


INSERT INTO Grades (grade_id, student_id, course_id, professor_id, grade) VALUES 
(1, 1, 1, 1, 85),
(2, 1, 2, 2, 90),
(3, 2, 1, 1, 88),
(4, 2, 3, 3, 75),
(5, 3, 2, 2, 95),
(6, 3, 3, 3, 80);

-- *********************************************************************************************************************************
-- HACER BUSQUEDAS

-- CALIFICACION  MEDIA DADA POR CADA PROFESOR

SELECT p.professor_id, p.first_name, p.last_name, AVG(g.grade) AS average_grade
FROM Professors p
JOIN Grades g ON p.professor_id = g.professor_id
GROUP BY p.professor_id, p.first_name, p.last_name;

-- MEJORES CALIFICACION DE CADA ESTUDIANTE

SELECT s.student_id, s.first_name, s.last_name, MAX(g.grade) AS top_grade
FROM Students s
JOIN Grades g ON s.student_id = g.student_id
GROUP BY s.student_id, s.first_name, s.last_name;


-- ORDENAR ESTUDIANTES POR CURSOS INSCRITOS

SELECT s.student_id, s.first_name, s.last_name, c.course_name
FROM Students s
JOIN Grades g ON s.student_id = g.student_id
JOIN Courses c ON g.course_id = c.course_id
ORDER BY s.student_id, c.course_name;


-- RESUMEN DE CURSOS Y CALIFICACIONES MEDIAS

SELECT c.course_id, c.course_name, AVG(g.grade) AS average_grade
FROM Courses c
JOIN Grades g ON c.course_id = g.course_id
GROUP BY c.course_id, c.course_name
ORDER BY average_grade ASC;

 -- ENCONTRAR ESTUDAINTE Y PROFESOR QUE TIENE MAS CURSOS EN COMUN

SELECT s.student_id, s.first_name, s.last_name, p.professor_id, p.first_name, p.last_name, COUNT(g.course_id) AS common_courses
FROM Students s
JOIN Grades g ON s.student_id = g.student_id
JOIN Professors p ON g.professor_id = p.professor_id
GROUP BY s.student_id, s.first_name, s.last_name, p.professor_id, p.first_name, p.last_name
ORDER BY common_courses DESC
LIMIT 1;
